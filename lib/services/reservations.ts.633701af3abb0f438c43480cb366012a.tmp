'use client';

import { supabase } from '@/lib/supabase/client';
import type { 
  Tables
} from '@/types/database';

import { authService } from './auth';
import { format } from "date-fns";
import { ko } from "date-fns/locale";
import { formatDateTimeForDisplay } from '@/lib/utils/date';

type BaseReservation = Tables<'reservations'>;
type ReservationInput = Omit<BaseReservation, 'id' | 'created_at' | 'updated_at'>;
type ReservationModify = Partial<ReservationInput>;

export type CreateReservationInput = {
  title: string;
  room_id: string;
  start_time: string;
  end_time: string;
  purpose?: string;
};

export class ReservationService {
  private static instance: ReservationService;

  private constructor() {}

  static getInstance(): ReservationService {
    if (!ReservationService.instance) {
      ReservationService.instance = new ReservationService();
    }
    return ReservationService.instance;
  }

  private async sendNotification(userId: string, title: string, body: string, url?: string) {
    try {
      await fetch('/api/notifications', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId,
          title,
          body,
          url,
        }),
      });
    } catch (error) {
      console.error('Error sending notification:', error);
    }
  }

  async getReservations(startDate: string, endDate: string): Promise<BaseReservation[]> {
    const { data, error } = await supabase
      .from('reservations')
      .select('*, room:rooms(*)')
      .gte('start_time', startDate)
      .lte('end_time', endDate)
      .eq('status', 'confirmed')
      .order('start_time');

    if (error) throw error;
    return data;
  }

  async createReservation(data: Tables<'reservations'>['Insert']): Promise<BaseReservation> {
    // The user ID should be part of the `data` object, pre-filled from the form
    if (!data.user_id) {
      throw new Error('User not found');
    }

    // Business logic validations (weekend, business hours) are now handled by Zod in the form.
    // Timezone conversions are also handled in the form.

    // Check for conflicts before inserting
    const hasConflict = await this.checkConflict(
      data.room_id,
      data.start_time,
      data.end_time
    );

    if (hasConflict) {
      throw new Error('선택한 시간에 이미 예약이 있습니다');
    }

    const { data: reservation, error } = await supabase
      .from('reservations')
      .insert(data) // Directly insert the validated and prepared data
      .select()
      .single();

    if (error) {
      // The database has a GIST constraint to prevent overlaps, which raises error code '23P01'
      if (error.code === '23P01' || error.message.includes('overlap')) {
        throw new Error('선택한 시간에 이미 예약이 있습니다');
      }
      throw error;
    }

    // Send notification
    await this.sendNotification(
      reservation.user_id,
      '예약이 생성되었습니다',
      `${reservation.title} (${formatDateTimeForDisplay(reservation.start_time)})`,
      `/reservations/${reservation.id}`
    );

    return reservation;
  }

  async updateReservation(id: string, data: Partial<ReservationInput>): Promise<BaseReservation> {
    const updateData: ReservationModify = {
      ...(data.room_id && { room_id: data.room_id }),
      ...(data.title && { title: data.title }),
      ...(data.purpose !== undefined && { purpose: data.purpose }),
      ...(data.start_time && { start_time: data.start_time }),
      ...(data.end_time && { end_time: data.end_time }),
    };

    const { data: reservation, error } = await supabase
      .from('reservations')
      .update(updateData)
      .eq('id', id)
      .select()
      .single();

    if (error) {
      throw error;
    }

    // Send notification
    await this.sendNotification(
      reservation.user_id,
      '예약이 수정되었습니다',
      `${reservation.title} (${new Date(reservation.start_time).toLocaleString()})`,
      `/reservations/${reservation.id}`
    );

    return reservation;
  }

  async cancelReservation(id: string): Promise<void> {
    const { data: reservation, error: getError } = await supabase
      .from('reservations')
      .select()
      .eq('id', id)
      .single();

    if (getError) {
      throw getError;
    }

    const { error: updateError } = await supabase
      .from('reservations')
      .update({ status: 'cancelled' })
      .eq('id', id);

    if (updateError) {
      throw updateError;
    }

    // Send notification
    await this.sendNotification(
      reservation.user_id,
      '예약이 취소되었습니다',
      `${reservation.title} (${new Date(reservation.start_time).toLocaleString()})`,
      '/reservations'
    );
  }

  async checkConflict(
    roomId: string,
    startTime: string,
    endTime: string,
    excludeId?: string
  ): Promise<boolean> {
    // Correct logic: A conflict exists if a confirmed reservation for the same room
    // starts before the new one ends AND ends after the new one starts.
    let query = supabase
      .from("reservations")
      .select("id", { count: "exact", head: true })
      .eq("room_id", roomId)
      .eq("status", "confirmed")
      .lt("start_time", endTime) // It starts before the new one ends
      .gt("end_time", startTime);   // It ends after the new one starts

    if (excludeId) {
      query = query.neq("id", excludeId);
    }

    const { error, count } = await query;

    if (error) {
      console.error("Conflict check error:", error);
      throw new Error("예약 가능 여부 확인 중 오류가 발생했습니다.");
    }

    return (count ?? 0) > 0;
  }

  async getReservationById(id: string): Promise<BaseReservation | null> {
    const { data, error } = await supabase
      .from('reservations')
      .select('*')
      .eq('id', id)
      .single();

    if (error) {
      console.error('Get reservation error:', error);
      return null;
    }

    return data;
  }

  async getReservationsWithDetails(
    startDate: string,
    endDate: string
  ): Promise<any[]> {
    const { data, error } = await supabase
      .from('reservations')
      .select(`
        *,
        room:rooms(*),
        user:users(*)
      `)
      .eq('status', 'confirmed')
      .gte('start_time', startDate)
      .lte('end_time', endDate)
      .order('start_time');

    if (error) {
      throw new Error(`예약 목록 조회 실패: ${error.message}`);
    }

    return data;
  }

  async getPublicReservations(
    startDate: string,
    endDate: string
  ): Promise<any[]> {
    const { data, error } = await supabase
      .rpc('get_public_reservations', {
        start_date: startDate,
        end_date: endDate,
      });

    if (error) {
      throw new Error(`공개 예약 목록 조회 실패: ${error.message}`);
    }

    return data;
  }

  async getMyReservations(): Promise<BaseReservation[]> {
    const currentUser = authService.getCurrentUser();
    if (!currentUser) {
      throw new Error('로그인이 필요합니다');
    }

    const { data, error } = await supabase
      .from('reservations')
      .select('*')
      .eq('user_id', currentUser.id)
      .eq('status', 'confirmed')
      .order('start_time');

    if (error) {
      throw new Error(`내 예약 목록 조회 실패: ${error.message}`);
    }

    return data;
  }

  async getAllReservations(): Promise<any[]> {
    // Admin only function
    if (!authService.isAdmin()) {
      throw new Error('관리자 권한이 필요합니다');
    }

    const { data, error } = await supabase
      .from('reservations')
      .select(`
        *,
        room:rooms(*),
        user:users(*)
      `)
      .order('start_time', { ascending: false });

    if (error) {
      throw new Error(`전체 예약 목록 조회 실패: ${error.message}`);
    }

    return data;
  }

  private async checkForConflicts(
    roomId: string,
    startTime: string,
    endTime: string,
    excludeId?: string
  ): Promise<void> {
    let query = supabase
      .from('reservations')
      .select('id')
      .eq('room_id', roomId)
      .eq('status', 'confirmed')
      .or(`start_time.lt.${endTime},end_time.gt.${startTime}`);

    if (excludeId) {
      query = query.neq('id', excludeId);
    }

    const { data, error } = await query;

    if (error) {
      throw new Error(`예약 충돌 확인 실패: ${error.message}`);
    }

    if (data && data.length > 0) {
      throw new Error('해당 시간에 이미 예약이 있습니다');
    }
  }

  // Realtime subscription for reservations
  subscribeToReservations(
    callback: (payload: any) => void
  ): () => void {
    const channel = supabase
      .channel('reservations_changes')
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'reservations',
        },
        callback
      )
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }
}

export const reservationService = ReservationService.getInstance(); 